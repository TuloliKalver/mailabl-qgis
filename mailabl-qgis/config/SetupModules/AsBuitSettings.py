# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Teostusjoonised.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.




from PyQt5.QtCore import Qt
from PyQt5.QtCore import QPropertyAnimation
from PyQt5.uic import loadUi
from types import MethodType
from PyQt5.QtWidgets import (
    QDialog, QFrame, QLabel, QCheckBox, QLineEdit
    )
from ...app.Animations.AnimatedGradientBorderFrame import AnimatedGradientBorderFrame
from ..settings import Filepaths, FilesByNames
from .SetupMainLayers import QGIS_items
from ..settings import Filepaths, FilesByNames, SettingsDataSaveAndLoad, StartupSettingsLoader
from ...utils.ComboboxHelper import GetValuesFromComboBox
from ...KeelelisedMuutujad.messages import Headings, HoiatusTexts, EdukuseTexts
from ...utils.ComboboxHelper import ComboBoxHelper
from ...utils.messagesHelper import ModernMessageDialog
from ...KeelelisedMuutujad.modules import Module
from ..settings_new import PluginSettings


combo_handler = ComboBoxHelper()


class TesotusChace:
    TeostusLayer = None
    TeostusStatus = None
    TeostusTypes = None
    checkBox = None
    locatioNameValue = None

class AsBuiltDrawings:
    def __init__(self, parent) -> None:
        self.dialog = parent

    def load_construction_drawings_setup_widget(self):

        module = Module.TASK

        ui_file_path = Filepaths.get_conf_widget(FilesByNames.TEOSTUS_SETUP)
        widget = loadUi(ui_file_path)


        widget.setWindowFlags(Qt.FramelessWindowHint | Qt.Tool | Qt.WindowStaysOnTopHint)
        widget.setAttribute(Qt.WA_TranslucentBackground)

        # ðŸ”„ Promote dragFrame to custom draggable logic
        drag_frame = widget.findChild(QFrame, "dragFrame")
        if drag_frame:
            # Inject drag behavior via method patching
            drag_frame.mousePressEvent = MethodType(DraggableFrame.mousePressEvent, drag_frame)
            drag_frame.mouseMoveEvent = MethodType(DraggableFrame.mouseMoveEvent, drag_frame)
            drag_frame._drag_pos = None
            drag_frame.setCursor(Qt.OpenHandCursor)   


        # Connect buttons to dialog accept/reject
        widget.pbSave.clicked.connect(lambda: AsBuiltDrawings._handle_save(widget))
        widget.pbCancel.clicked.connect(lambda: AsBuiltDrawings._handle_cancel(widget))


        animation = QPropertyAnimation(widget, b"windowOpacity")
        animation.setDuration(300)
        animation.setStartValue(0.0)
        animation.setEndValue(1.0)
        animation.start()



        AsBuiltDrawings.replace_frame(
            widget, 
            "FrameMain", 
            lambda parent: AnimatedGradientBorderFrame(parent,
                                                        style=AnimatedGradientBorderFrame.INSPIRE)
        )


        label = widget.lblLocatioNameValue
        cb1 = widget.checkBox
        cmbLayer = widget.cmbLayer
        cmbPreferred_status = widget.cmbPreferred_status
        cmbTeostusTypes = widget.cmbTeostusTypes


        AsbuiltLayer = PluginSettings.load_setting(
            module=module,
            context=PluginSettings.CONTEXT_PREFERRED,
            subcontext=PluginSettings.OPTION_LAYER,
            key_type=PluginSettings.ASBUILT_LAYER,
        )

        folder = PluginSettings.load_setting(
            module=module,
            context=PluginSettings.CONTEXT_PREFERRED,
            subcontext=PluginSettings.CONTEXT_FOLDER,
        )

        value = PluginSettings.load_setting(
            module=module,
            context=PluginSettings.CONTEXT_PREFERRED,
            subcontext=PluginSettings.CONTEXT_FOLDER,
            key_type=PluginSettings.CHECKBOXVALUE,
        )

        print("value:", value)
        if value == "true":
            value = True
        else:
            value = False

        cb1.setChecked(value)

        label.setText(folder)

        combo_handler.populate_comboBox_smart(
            comboBox=cmbPreferred_status,
            module=module,
            context=self,
            preferred_items=False
        )

        QGIS_items.clear_and_add_layerNames_selected(cmbLayer, AsbuiltLayer)

        combo_handler.populate_comboBox_smart(
            comboBox=cmbTeostusTypes,
            module=Module.TASK,
            context=self,
            preferred_items=True
        )

        result = widget.exec_()

        if result == QDialog.Accepted:
            # âœ… Extract values *before* the dialog is deleted

            layer_name = GetValuesFromComboBox._get_selected_name_from_combobox(cmbLayer)

            status_name = GetValuesFromComboBox._get_selected_name_from_combobox(cmbPreferred_status)
            status_ids = GetValuesFromComboBox._get_selected_id_from_combobox(cmbPreferred_status)



            types_names =cmbTeostusTypes.checkedItems()
            types_ids = []
            
            for index in range(cmbTeostusTypes.count()):
                if cmbTeostusTypes.itemCheckState(index) == Qt.Checked:
                    types_ids.append(cmbTeostusTypes.itemData(index))



            location_folder = label.text()
            is_part_of_project = cb1.isChecked()

            AsBuiltDrawings.save_settings(self,
                                type_name = types_names,
                                type_ids = types_ids,
                                status_name = status_name,
                                status_ids = status_ids,
                                layer_name = layer_name, 
                                location_folder = location_folder,
                                is_part_of_project = is_part_of_project
                                )
                                

            widget.setAttribute(Qt.WA_DeleteOnClose)
            
            return True
        else:
            widget.setAttribute(Qt.WA_DeleteOnClose)
            return None

    @staticmethod
    def replace_frame(widget, old_name: str, new_frame_cls: type, *args, **kwargs) -> QFrame:
        old = widget.findChild(QFrame, old_name)
        if old is None:
            raise ValueError(f"Could not find frame named '{old_name}'.")

        layout = old.parentWidget().layout()
        index = layout.indexOf(old)
        layout.removeWidget(old)
        old.deleteLater()

        new_frame = new_frame_cls(widget, *args, **kwargs)
        new_frame.setObjectName(old_name)
        new_frame.setLayout(old.layout())  # reuse inner layout if needed
        layout.insertWidget(index, new_frame)
        return new_frame


    def save_settings(self,
                        type_name,
                        type_ids,
                        status_name,
                        status_ids,
                        layer_name,
                        location_folder,
                        is_part_of_project
                        ):
        
        module = Module.ASBUILT

        PluginSettings.save_setting(
            module=module,
            context=PluginSettings.CONTEXT_PREFERRED,
            subcontext=PluginSettings.OPTION_STATUS,
            key_type=PluginSettings.SUB_CONTEXT_IDs,
            value = status_ids
            )

        PluginSettings.save_setting(
            module=module,
            context=PluginSettings.CONTEXT_PREFERRED,
            subcontext=PluginSettings.OPTION_STATUS,
            key_type=PluginSettings.SUB_CONTEXT_NAME,
            value = status_name
            )

        PluginSettings.save_setting(
            module=module,
            context=PluginSettings.CONTEXT_PREFERRED,
            subcontext=PluginSettings.OPTION_LAYER,
            key_type=PluginSettings.ASBUILT_LAYER,
            value = layer_name
        )

        PluginSettings.save_setting(
            module=module,
            context=PluginSettings.CONTEXT_PREFERRED,
            subcontext=PluginSettings.OPTION_TYPE,
            key_type=PluginSettings.SUB_CONTEXT_NAME,
            value = type_name
        )

        PluginSettings.save_setting(
            module=module,
            context=PluginSettings.CONTEXT_PREFERRED,
            subcontext=PluginSettings.OPTION_TYPE,
            key_type=PluginSettings.SUB_CONTEXT_IDs,
            value = type_ids
        )

        PluginSettings.save_setting(
            module=module,
            context=PluginSettings.CONTEXT_PREFERRED,
            subcontext=PluginSettings.CONTEXT_FOLDER,
            value = location_folder
        )

        PluginSettings.save_setting(
            module=module,
            context=PluginSettings.CONTEXT_PREFERRED,
            subcontext=PluginSettings.CONTEXT_FOLDER,
            key_type=PluginSettings.CHECKBOXVALUE,
            value = is_part_of_project
        )

        StartupSettingsLoader.startup_label_loader(self)



    @staticmethod
    def _handle_save(dialog):
        dialog.accept()

    @staticmethod
    def _handle_cancel(dialog):
        dialog.reject()

class DraggableFrame(QFrame):
    def __init__(self, parent=None):
        super().__init__(parent)
        self._drag_pos = None
        self.setCursor(Qt.OpenHandCursor)

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self._drag_pos = event.globalPos() - self.window().frameGeometry().topLeft()
            event.accept()

    def mouseMoveEvent(self, event):
        if event.buttons() & Qt.LeftButton and self._drag_pos:
            self.window().move(event.globalPos() - self._drag_pos)
            event.accept()








